require "delegate"
class SimpleDelegator < Delegator
  def initialize(obj)
    super                  # pass obj to Delegator constructor, required
    @delegate_sd_obj = obj # store obj for future use
  end
  def __getobj__
    @delegate_sd_obj # return object we are delegating to, required
  end

  def __setobj__(obj)
    @delegate_sd_obj = obj # change delegation object,
                           # a feature we're providing
  end
  def first_element
  	self[0]
  end
  def method_missing(m, *args, &block)
   super m, *args, &block
  end
end
s = SimpleDelegator.new [1, 2, 3, 4]
puts "first element = #{s.first_element}"
dump=s.marshal_dump()
s.__setobj__ "abcd"
puts "reverse of string abcd = #{s.reverse}"
s.marshal_load(dump)
p s.reverse
s.freeze 
#s.__setobj__ [1, 2] cannot change as its frozen
