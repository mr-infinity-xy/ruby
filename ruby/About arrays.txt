Arrays are ordered, integer-indexed collections of any object. Array indexing starts at 0. A negative index is assumed to be relative to the end of the array---that is, an index of -1 indicates the last element of the array, -2 is the next to last element in the array, and so on.

array = [1, "two", 3.0]

Array can be created by calling new as
array = Array.new    
Array.new(4, 1)      #  returns [1,1,1,1]

public class methods
1) [](*args)
Returns a new array populated with the given objects.
eg) Array.[]( 1, 2, 3 )  # returns [1,2,3] array

2)new(size, obj), new(array)
new(size,obj) creates with multiple copies of object obj . Number of copy is specified by first parameter .
new(array) takes array as input and creates the copy of array

3) try_convert(obj)
Tries to convert obj into an array, using to_ary method. Returns the converted array or nil if obj cannot be converted for any reason. This method can be used to check if an argument is an array.
Array.try_convert([1])    # can be converted array
Array.try_convert("1")    # cannot be converted to array 

public instance method
1)ary & other_ary
Returns a new array containing elements common to the two arrays, excluding any duplicates. The order is preserved from the original array
[ 1, 1, 3,4 5 ] & [ 1, 4,6 ]  # returns [1,4]

3)array * int, array * str
array*int  repeats the array number of times given by the parameter int
[1,2,3]*3   # returns [1,2,3,1,2,3,1,2,3]

array*str returns string containing all the elements of the array and seprating all element by the string specified in the parameter
[1,2,3]*" | "  #returns 1 | 2 | 3 

4) ary + other_ary
Returns a new array built by concatenating the two arrays together to produce a third array.

[ 1, 2, 3 ] + [ 4, 5 ]    # returns  [ 1, 2, 3, 4, 5 ]


 




