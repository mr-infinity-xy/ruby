Ruby allows devlopers to work on diffrent files and allows the source to be included in diffrent files using load method.But this may lead to name conflict between diffrent methods and classes in diffrent files. Diffrent files may contain method with the same name, but in ruby if methods have same name then the most recent defined method is only considered. So all the other methods in with a same name in the previously included file will be lost. There may also be classes with the same name existing in two diffrent files and inclusion of such files would lead to merger of this two classes as ruby provide class extensiblity feature due to which classes can be enhanced anywhere in the program. It may also happen that not only the class name but the method name inside the classes may be same, that would hide some of the method.
Example of conflict
Num.rb file
def add a,b
 a+b
end

Str.rb file
def add a,b
 "#{a}#{b}"
end

Merge.rb
load 'Num.rb'
load 'Str.rb'
puts add 2,10

o/p
210
However we expected answer to be 12. But add method of Str.rb was used as Str.rb file was loaded after Num.rb file  
To overcome this name conflict ruby provides modules. Modules help to solve these conflicts by providing namespaces
that can contain any number of classes, methods, and constants, and allow you to address them directly
Modules is defined as a same way as the classes are defined. Modules are defined using the module keyword followed by module name
syntax:
module module_name
end
The above example can be written using modules to avoid conflit.
eg)
Num.rb file
module Num
def Num.add a,b
 a+b
end
end

Str.rb file
module Str
def Str.add a,b
 "#{a}#{b}"
end
end

Merge.rb
load "Num.rb"
load "Str.rb"
puts Num.add(2,10)       # print 12
puts Str.add("ab","cd")  # prints abcd

Using modules we have avoided the name conflict. Both add function in Num.rb and Str.rb file can be used as they are stored inside the module. The call to the method can be done using the module name. Module may look similar to the class but they are very diffrent from the classes. Modules cannot have object as they are just way of storing method classes to avoid name conflict




Two file having the same class name can be used together by using the modules. If classes in two files are stored in modules then the name conflict can be avoided and both classes can be used.
eg)
Animal.rb file
module Animal
class Animal
	def eat
		puts "Animal eat"
	end
end 
end

Animal1.rb
module Animal1
class Animal
	def walk
		puts "Animal walk"
	end
end 
end

Merge.rb
load "Animal.rb"
load "Animal1.rb"
a=Animal::Animal.new
a.eat
a1=Animal1::Animal.new
a1.walk

:: is a name resolution operator to access the class from a module.




