Ruby on Rails MVC framework:

The Model View Controller principle divides the work of an application into three separate but closely cooperative subsystems.

Model (ActiveRecord )
Maintains the relationship between Object and Database and handles validation, association, transactions. This subsystem is implemented in ActiveRecord library which provides an interface and binding between the tables in a relational database and the Ruby program code that manipulates database records. Ruby method names are automatically generated from the field names of database tables.

View ( ActionView )
A presentation of data in a particular format, triggered by a controller's decision to present the data.
This subsystem is implemented in ActionView library which is an Embedded Ruby (ERb) based system for defining presentation templates for data presentation. Every Web connection to a Rails application results in the displaying of a view.

Controller ( ActionController )
The facility within the application that directs traffic, on the one hand querying the models for specific data, and on the other hand organizing that data into a form that fits the needs of a given view. This subsystem is implemented in ActionController which is a data broker sitting between ActiveRecord (the database interface) and ActionView (the presentation engine).


Example of a forum created in Ruby on Rails
The browser makes a request, such as http://abc.com/forum/show/1

The web server receives the request. It uses routes to find out which controller to use: the default route pattern is “/controller/action/id” as defined in config/routes.rb. In our case, it’s the forum controller, method show, id 1. The web server call the action and pass the parameters.

Controllers do the work of parsing user requests, data submissions, cookies, sessions. They acts like a manager that manages all interaction work. In our case, the show method in the forum controller knows it needs to lookup a forum post.It asks the model to get forum post with id 1, and will eventually display it to the user.

Models are Ruby classes. They talk to the database, store and validate data, perform the business logic and otherwise do the heavy lifting. In this case, the model retrieves forum post with id 1 from the database.

Views are what the user sees i.e HTML, CSS, XML, Javascript, JSON. User are in direct contact with view and select certain actions on views to retrive the desired response. In our example, the controller gives forum post with id 1 to the show view. The show view generates the HTML document which contains post contains and the response that the user have posted on the forum.







 